Прототип, (англ. Prototype) — порождающий шаблон проектирования.
--------------------------------------------------------------------------------------------------------------
Назначение:
	Задаёт виды создаваемых объектов с помощью экземпляра-прототипа и создаёт новые объекты путём 
копирования этого прототипа. Он позволяет уйти от реализации и позволяет следовать принципу 
«программирование через интерфейсы». В качестве возвращающего типа указывается интерфейс/абстрактный 
класс на вершине иерархии, а классы-наследники могут подставить туда наследника, реализующего этот тип.
	Проще говоря, это паттерн создания объекта через клонирование другого объекта вместо создания через конструктор.
--------------------------------------------------------------------------------------------------------------
Применимость:
	Паттерн используется чтобы:
	- избежать дополнительных усилий по созданию объекта стандартным путём (имеется в виду использование 
	  конструктора, так как в этом случае также будут вызваны конструкторы всей иерархии предков объекта), 
	  когда это непозволительно дорого для приложения.
	- избежать наследования создателя объекта (object creator) в клиентском приложении, как это делает 
	  паттерн abstract factory. 
--------------------------------------------------------------------------------------------------------------	 
Используйте этот шаблон проектирования, когда системe безразлично как именно в ней создаются, 
компонуются и представляются продукты:
	 - инстанцируемые классы определяются во время выполнения, например с помощью динамической загрузки;
	 - избежать построения иерархий классов или фабрик, параллельных иерархии классов продуктов;
	 - экземпляры класса могут находиться в одном из нескольких различных состояний. Может оказаться 
	   удобнее установить соответствующее число прототипов и клонировать их, а не инстанцировать каждый 
	   раз класс вручную в подходящем состоянии.
--------------------------------------------------------------------------------------------------------------	   
Ссылки:
 - https://ru.wikipedia.org/wiki/Прототип_(шаблон_проектирования)
 - https://metanit.com/sharp/patterns/2.4.php
 --------------------------------------------------------------------------------------------------------------
Участники:
	- Prototype: определяет интерфейс для клонирования самого себя, который, как правило, представляет метод Clone()
	- ConcretePrototype1 и ConcretePrototype2: конкретные реализации прототипа. Реализуют метод Clone()
	- Client: создает объекты прототипов с помощью метода Clone()
--------------------------------------------------------------------------------------------------------------
 Пример:
  using System;
 
 namespace Prototype
 {  
  class MainApp
  {    
    static void Main()
    {
      // Create two instances and clone each 
      Prototype prototype1 = new ConcretePrototype1("I");
      Prototype clonedPrototype1 = prototype1.Clone();
      Console.WriteLine ("Cloned: {0}", clonedPrototype1 .Id);
 
      Prototype prototype2 = new ConcretePrototype2("II");
      Prototype clonedPrototype2 = prototype2.Clone();
      Console.WriteLine ("Cloned: {0}", clonedPrototype2 .Id);
    }
  }
 
  // "Prototype" 
  public abstract class Prototype
  {
    // Constructor
    public Prototype(string id)
    {
        this.Id = id;

        Console.Write("Base constructor is called.");
    }
 
    // Property
    public string Id { get; private set; }
 
    public virtual Prototype Clone()
    {
         // Shallow copy
        return (Prototype)this.MemberwiseClone();
    }
  }
 
  // "ConcretePrototype1" 
  public class ConcretePrototype1 : Prototype
  {
    // Constructor
    public ConcretePrototype1(string id) : base(id)
    {
    }
  }
 
  // "ConcretePrototype2" 
  public class ConcretePrototype2 : Prototype
  {
    // Constructor
    public ConcretePrototype2(string id) : base(id)
    {
    }
  }
 }
 --------------------------------------------------------------------------------------------------------------