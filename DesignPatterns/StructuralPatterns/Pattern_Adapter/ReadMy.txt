	Адаптер (англ. Adapter) 
	Cтруктурный шаблон проектирования, предназначенный для организации использования функций объекта, 
	недоступного для модификации, через специально созданный интерфейс.

Задача - Система поддерживает требуемые данные и поведение, но имеет неподходящий интерфейс.
Способ решения - Адаптер предусматривает создание класса-оболочки с требуемым интерфейсом.
-------------------------------------------------------------------------------------------------------
Участники:
	Класс Adapter приводит интерфейс класса Adaptee в соответствие с интерфейсом класса Target 
	(наследником которого является Adapter). Это позволяет объекту Client использовать объект 
	Adaptee (посредством адаптера Adapter) так, словно он является экземпляром класса Target.
	Таким образом Client обращается к интерфейсу Target, реализованному в наследнике Adapter, 
	который перенаправляет обращение к Adaptee.
-------------------------------------------------------------------------------------------------------
Участники:
	Target: представляет объекты, которые используются клиентом
	Client: использует объекты Target для реализации своих задач
	Adaptee: представляет адаптируемый класс, который мы хотели бы использовать у клиента вместо объектов Target
	Adapter: собственно адаптер, который позволяет работать с объектами Adaptee как с объектами Target.	
То есть клиент ничего не знает об Adaptee, он знает и использует только объекты Target. И благодаря адаптеру 
мы можем на клиенте использовать объекты Adaptee как Target
-------------------------------------------------------------------------------------------------------
Следствия - Шаблон Адаптер позволяет включать уже существующие объекты в новые объектные структуры, 
			независимо от различий в их интерфейсах.

Замечания и комментарии - Шаблон Адаптер позволяет в процессе проектирования не принимать во внимание 
			возможные различия в интерфейсах уже существующих классов. Если есть класс, обладающий 
			требуемыми методами и свойствами (по крайней мере, концептуально), то при необходимости 
			всегда можно воспользоваться шаблоном Адаптер для приведения его интерфейса к нужному виду.

Близким Адаптеру является шаблон Фасад, не всегда можно отличить один от другого.

Применение шаблона - Типичным примером использования шаблона Адаптер можно назвать создание классов, 
			приводящих к единому интерфейсу функции языка PHP обеспечивающие доступ к различным СУБД.

Реализация - Включение уже существующего класса в другой класс. Интерфейс включающего класса приводится 
			в соответствие с новыми требованиями, а вызовы его методов преобразуются в вызовы методов 
			включённого класса.
-------------------------------------------------------------------------------------------------------
ссылки:
	https://ru.wikipedia.org/wiki/Адаптер_(шаблон_проектирования)
	https://metanit.com/sharp/patterns/4.2.php
-------------------------------------------------------------------------------------------------------
Пример:

using System; 
 namespace Adapter
 {  
  class MainApp
  {
    static void Main()
    {
      // Create adapter and place a request
      Target target = new Adapter();
      target.Request();
 
      // Wait for user
      Console.Read();
    }
  }
 
  // "Target" 
  class Target
  {
    public virtual void Request()
    {
      Console.WriteLine("Called Target Request()");
    }
  }
 
  // "Adapter" 
  class Adapter : Target
  {
    private Adaptee adaptee = new Adaptee();
 
    public override void Request()
    {
      // Possibly do some other work
      // and then call SpecificRequest
      adaptee.SpecificRequest();
    }
  }
 
  // "Adaptee" 
  class Adaptee
  {
    public void SpecificRequest()
    {
      Console.WriteLine("Called SpecificRequest()");
    }
  }
 }
-------------------------------------------------------------------------------------------------------