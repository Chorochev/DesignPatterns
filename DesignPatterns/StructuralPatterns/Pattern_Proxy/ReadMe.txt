	Заместитель (шаблон проектирования)

	Заместитель Proxy 
Тип:	структурный

Назначение:	Предоставляет суррогатный объект, управляющий доступом к другому объекту.

Плюсы:	
	- удалённый заместитель;
	- виртуальный заместитель может выполнять оптимизацию;
	- защищающий заместитель;
	- «умная» ссылка;

Минусы:	
	- резкое увеличение времени отклика.

Заместитель (англ. Proxy) — структурный шаблон проектирования, который предоставляет объект, который контролирует 
доступ к другому объекту, перехватывая все вызовы (выполняет функцию контейнера).

Проблема:
	- Необходимо контролировать доступ к объекту, не изменяя при этом поведение клиента. 
	- Необходимо иметь доступ к объекту так, чтобы не создавать реальные объекты непосредственно, 
	а через другой объект, который может иметь дополнительную функциональность.

Решение:
	Создать суррогат реального объекта. «Заместитель» хранит ссылку, которая позволяет заместителю обратиться 
	к реальному субъекту (объект класса «Заместитель» может обращаться к объекту класса «Субъект», если интерфейсы 
	«Реального Субъекта» и «Субъекта» одинаковы). Поскольку интерфейс «Реального Субъекта» идентичен интерфейсу 
	«Субъекта», так, что «Заместителя» можно подставить вместо «Реального Субъекта», контролирует доступ к «Реальному 
	Субъекту», может отвечать за создание или удаление «Реального Субъекта». «Субъект» определяет общий для «Реального 
	Субъекта» и «Заместителя» интерфейс так, что «Заместитель» может быть использован везде, где ожидается «Реальный 
	Субъект». При необходимости запросы могут быть переадресованы «Заместителем» «Реальному Субъекту».

Виды:
	- Протоколирующий прокси: сохраняет в лог все вызовы «Субъекта» с их параметрами.
	- Удалённый заместитель (англ. remote proxies): обеспечивает связь с «Субъектом», который находится в другом 
	адресном пространстве или на удалённой машине. Также может отвечать за кодирование запроса и его аргументов и 
	отправку закодированного запроса реальному «Субъекту».
	- Виртуальный заместитель (англ. virtual proxies): обеспечивает создание реального «Субъекта» только тогда, 
	когда он действительно понадобится. Также может кэшировать часть информации о реальном «Субъекте», чтобы отложить 
	его создание.
	- Копировать-при-записи: обеспечивает копирование «субъекта» при выполнении клиентом определённых действий (частный 
	случай «виртуального прокси»).
	- Защищающий заместитель (англ. protection proxies): может проверять, имеет ли вызывающий объект необходимые для 
	выполнения запроса права.
	- Кэширующий прокси: обеспечивает временное хранение результатов расчёта до отдачи их множественным клиентам, которые 
	могут разделить эти результаты.
	- Экранирующий прокси: защищает «Субъект» от опасных клиентов (или наоборот).
	- Синхронизирующий прокси: производит синхронизированный контроль доступа к «Субъекту» в асинхронной многопоточной среде.
	- «Умная» ссылка (англ. smart reference proxy): производит дополнительные действия, когда на «Субъект» создается ссылка, 
	например, рассчитывает количество активных ссылок на «Субъект».

Преимущества и недостатки от применения:
	Преимущества:
		- удалённый заместитель;
		- виртуальный заместитель может выполнять оптимизацию;
		- защищающий заместитель;
		- «умная» ссылка(указатель);

	Недостатки:
		- резкое увеличение времени отклика.

Сфера применения:
	Шаблон Proxy может применяться в случаях работы с сетевым соединением, с огромным объектом в памяти (или на диске) 
	или с любым другим ресурсом, который сложно или тяжело копировать. Хорошо известный пример применения — объект, 
	подсчитывающий число ссылок.

Прокси и близкие к нему шаблоны:
	- Адаптер обеспечивает отличающийся интерфейс к объекту.
	- Прокси обеспечивает тот же самый интерфейс.
	- Декоратор обеспечивает расширенный интерфейс.

------------------------------------------------------------------------------------------------------------------------------
На C# паттерн формально может выглядеть следующим образом:
class Client
{
    void Main()
    {
        Subject subject = new Proxy();
        subject.Request();
    }
}
abstract class Subject
{
    public abstract void Request();
}
 
class RealSubject : Subject
{
    public override void Request()
    {}
}
class Proxy : Subject
{
    RealSubject realSubject;
    public override void Request()
    {
        if (realSubject == null)
            realSubject = new RealSubject();
        realSubject.Request();
    }
}
Участники паттерна:
	- Subject: определяет общий интерфейс для Proxy и RealSubject. Поэтому Proxy может использоваться вместо RealSubject.
	- RealSubject: представляет реальный объект, для которого создается прокси.
	- Proxy: заместитель реального объекта. Хранит ссылку на реальный объект, контролирует к нему доступ, может управлять 
	его созданием и удалением. При необходимости Proxy переадресует запросы объекту RealSubject.
	- Client: использует объект Proxy для доступа к объекту RealSubject.
------------------------------------------------------------------------------------------------------------------------------
Пример реализации:

using System;
  using System.Threading;

  class MainApp
  {
    static void Main()
    {
      // Create math proxy
      IMath p = new MathProxy();

      // Do the math
      Console.WriteLine("4 + 2 = " + p.Add(4, 2));
      Console.WriteLine("4 - 2 = " + p.Sub(4, 2));
      Console.WriteLine("4 * 2 = " + p.Mul(4, 2));
      Console.WriteLine("4 / 2 = " + p.Div(4, 2));

      // Wait for user
      Console.Read();
    }
  }

  /// <summary>
  /// Subject - субъект
  /// </summary>
  /// <remarks>
  /// <li>
  /// <lu>определяет общий для <see cref="Math"/> и <see cref="Proxy"/> интерфейс, так что класс
  /// <see cref="Proxy"/> можно использовать везде, где ожидается <see cref="Math"/></lu>
  /// </li>
  /// </remarks>
  public interface IMath
  {
    double Add(double x, double y);
    double Sub(double x, double y);
    double Mul(double x, double y);
    double Div(double x, double y);
  }


  /// <summary>
  /// RealSubject - реальный объект
  /// </summary>
  /// <remarks>
  /// <li>
  /// <lu>определяет реальный объект, представленный заместителем</lu>
  /// </li>
  /// </remarks>
  class Math : IMath
  {
    public Math()
    {
        Console.WriteLine("Create object Math. Wait...");
        Thread.Sleep(1000);
    }

    public double Add(double x, double y){return x + y;}
    public double Sub(double x, double y){return x - y;}
    public double Mul(double x, double y){return x * y;}
    public double Div(double x, double y){return x / y;}
  }

  /// <summary>
  /// Proxy - заместитель
  /// </summary>
  /// <remarks>
  /// <li>
  /// <lu>хранит ссылку, которая позволяет заместителю обратиться к реальному
  /// субъекту. Объект класса <see cref="MathProxy"/> может обращаться к объекту класса
  /// <see cref="IMath"/>, если интерфейсы классов <see cref="Math"/> и <see cref="IMath"/> одинаковы;</lu>
  /// <lu>предоставляет интерфейс, идентичный интерфейсу <see cref="IMath"/>, так что заместитель
  /// всегда может быть предоставлен вместо реального субъекта;</lu>
  /// <lu>контролирует доступ к реальному субъекту и может отвечать за его создание 
  /// и удаление;</lu>
  /// <lu>прочие обязанности зависят от вида заместителя:
  /// <li>
  /// <lu><b>удаленный заместитель</b> отвечает за кодирование запроса и его аргументов
  /// и отправление закодированного запроса реальному субъекту в
  /// другом адресном пространстве;</lu>
  /// <lu><b>виртуальный заместитель</b> может кэшировать дополнительную информацию
  /// о реальном субъекте, чтобы отложить его создание.</lu>
  /// <lu><b>защищающий заместитель</b> проверяет, имеет ли вызывающий объект 
  /// необходимые для выполнения запроса права;</lu>
  /// </li>
  /// </lu>
  /// </li>
  /// </remarks>
  class MathProxy : IMath
  {
    Math math;

    public MathProxy()
    {
      math = null;
    }

    /// <summary>
    /// Быстрая операция - не требует реального субъекта
    /// </summary>
    /// <param name="x"></param>
    /// <param name="y"></param>
    /// <returns></returns>
    public double Add(double x, double y)
    {
      return x + y;
    }

    public double Sub(double x, double y)
    {
      return x - y;
    }

    /// <summary>
    /// Медленная операция - требует создания реального субъекта
    /// </summary>
    /// <param name="x"></param>
    /// <param name="y"></param>
    /// <returns></returns>
    public double Mul(double x, double y)
    {
      if (math == null)
          math = new Math();
      return math.Mul(x, y);
    }

    public double Div(double x, double y)
    {
      if (math == null)
          math = new Math();
      return math.Div(x, y);
    }
  }
------------------------------------------------------------------------------------------------------------------------------
Ссылки:
	- https://ru.wikipedia.org/wiki/Заместитель_(шаблон_проектирования)
	- https://metanit.com/sharp/patterns/4.5.php
