Компоновщик (англ. Composite pattern) 
	— структурный шаблон проектирования, объединяющий объекты в древовидную структуру для представления иерархии 
	от частного к целому. Компоновщик позволяет клиентам обращаться к отдельным объектам и к группам объектов одинаково.

Цель
	Паттерн определяет иерархию классов, которые одновременно могут состоять из примитивных и сложных объектов, 
	упрощает архитектуру клиента, делает процесс добавления новых видов объекта более простым.
-------------------------------------------------------------------------------------------------------------------------

Паттерн Компоновщик (Composite) объединяет группы объектов в древовидную структуру по принципу "часть-целое и позволяет 
	клиенту одинаково работать как с отдельными объектами, так и с группой объектов.
	Образно реализацию паттерна можно представить в виде меню, которое имеет различные пункты. Эти пункты могут содержать 
	подменю, в которых, в свою очередь, также имеются пункты. То есть пункт меню служит с одной стороны частью меню, 
	а с другой стороны еще одним меню. В итоге мы однообразно можем работать как с пунктом меню, так и со всем меню в целом.

Когда использовать компоновщик?
	- Когда объекты должны быть реализованы в виде иерархической древовидной структуры.
	- Когда клиенты единообразно должны управлять как целыми объектами, так и их составными частями. 
	  То есть целое и его части должны реализовать один и тот же интерфейс.
-------------------------------------------------------------------------------------------------------------------------
Участники
	Component: определяет интерфейс для всех компонентов в древовидной структуре.
	Composite: представляет компонент, который может содержать другие компоненты и реализует механизм для их 
			   добавления и удаления.
	Leaf: представляет отдельный компонент, который не может содержать другие компоненты.
	Client: клиент, который использует компоненты.
-------------------------------------------------------------------------------------------------------------------------
ссылки:
	- https://ru.wikipedia.org/wiki/Компоновщик_(шаблон_проектирования)
	- https://metanit.com/sharp/patterns/4.4.php
-------------------------------------------------------------------------------------------------------------------------
class MainApp
  {
    static void Main()
    {
      // Create a tree structure
      Composite root = new Composite("root");
 
      root.Add(new Leaf("Leaf A"));
      root.Add(new Leaf("Leaf B"));
 
      Composite comp = new Composite("Composite X");
 
      comp.Add(new Leaf("Leaf XA"));
      comp.Add(new Leaf("Leaf XB"));
      root.Add(comp);
      root.Add(new Leaf("Leaf C"));
 
      // Add and remove a leaf
      Leaf leaf = new Leaf("Leaf D");
      root.Add(leaf);
      root.Remove(leaf);
 
      // Recursively display tree
      root.Display(1);
 
      // Wait for user
      Console.Read();
    }
  }
 
  /// <summary>
  /// Component - компонент
  /// </summary>
  /// <li>
  /// <lu>объявляет интерфейс для компонуемых объектов;</lu>
  /// <lu>предоставляет подходящую реализацию операций по умолчанию,
  /// общую для всех классов;</lu>
  /// <lu>объявляет интерфейс для доступа к потомкам и управлению ими;</lu>
  /// <lu>определяет интерфейс доступа к родителю компонента в рекурсивной структуре
  /// и при необходимости реализует его. Описанная возможность необязательна;</lu>
  /// </li>
  abstract class Component
  {
    protected string name;
 
    // Constructor
    public Component(string name)
    {
      this.name = name;
    }

    public abstract void Display(int depth);
  }
 
  /// <summary>
  /// Composite - составной объект
  /// </summary>
  /// <li>
  /// <lu>определяет поведеление компонентов, у которых есть потомки;</lu>
  /// <lu>хранит компоненты-потомоки;</lu>
  /// <lu>реализует относящиеся к управлению потомками операции и интерфейсе
  /// класса <see cref="Component"/></lu>
  /// </li>
  class Composite : Component
  {
    private List<Component> children = new List<Component>();
 
    // Constructor
    public Composite(string name) : base(name)
    {  
    }
 
    public void Add(Component component)
    {
      children.Add(component);
    }
 
    public void Remove(Component component)
    {
      children.Remove(component);
    }
 
    public override void Display(int depth)
    {
      Console.WriteLine(new String('-', depth) + name);
 
      // Recursively display child nodes
      foreach (Component component in children)
      {
        component.Display(depth + 2);
      }
    }
  }
 
  /// <summary>
  /// Leaf - лист
  /// </summary>
  /// <remarks>
  /// <li>
  /// <lu>представляет листовой узел композиции и не имеет потомков;</lu>
  /// <lu>определяет поведение примитивных объектов в композиции;</lu>
  /// </li>
  /// </remarks>
  class Leaf : Component
  {
    // Constructor
    public Leaf(string name) : base(name)
    {  
    }
 
    public override void Display(int depth)
    {
      Console.WriteLine(new String('-', depth) + name);
    }
  }